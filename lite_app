use Mojolicious::Lite;

use FindBin;
BEGIN { unshift @INC, "$FindBin::Bin/lib" }

use Mojo::Util qw/slurp spurt/;

use File::Spec::Functions qw(catdir catfile splitdir);
use File::Path;
use List::Util qw(first);

use DZ;

my $host;

plugin 'RemoteAddr';

helper dz => sub { DZ->new({app => shift}) };

hook before_routes => sub {
  my $c = shift;
  $host = $c->req->url->to_abs->host;
  my $host_root = $c->app->home."/branded/$host";
  if ( -d $host_root ) {
    unshift @{$c->app->static->paths}, "$host_root/public" unless grep { $_ eq "$host_root/public" } @{$c->app->static->paths};
    unshift @{$c->app->renderer->paths}, "$host_root/templates" unless grep { $_ eq "$host_root/templates" } @{$c->app->renderer->paths};
  }
};

get '/:uuid' => [uuid => qr/[0-9]+|[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/] => {uuid => 0} => sub {
  my $self = shift;
  $self->stash(host => $host, uuid => $self->dz->uuid, files => [], name => '');
  my $path = $self->dz->path or die "Path error";
  $self->app->log->debug("Viewing $host : $path");
  if ( -d $path ) {
    opendir(my $dir, $path);
    $self->stash(files => [grep { !/^\.dz-/ && -f $self->dz->file($_) } readdir $dir], name => $self->dz->repo->name);
  }
  return $self->render('filelist') if $self->req->is_xhr;
} => 'session';

get '/new' => sub {
  my $self = shift;
  $self->redirect_to('session', uuid => $self->dz->new_uuid);
};

get '/:uuid/delete' => [uuid => qr/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/] => sub {
  my $self = shift;
  my $path = $self->dz->path;
  # rm -rf $path if -d $path;
  $self->app->log->debug("Delete $path");
  $self->render(text => "Done.");
};

post '/:uuid/delete' => [uuid => qr/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/] => sub {
  my $self = shift;
  my $path = $self->dz->path;
  foreach ( @{$self->req->json} ) {
    my $file = $self->dz->file($_);
    # Need to clean input of ../
    # unlink $file if -e $file;
    $self->app->log->debug("Delete $file");
  }
  $self->render(text => "Done.");
};

post '/:uuid/name' => [uuid => qr/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/] => sub {
  my $self = shift;
  my $name = $self->dz->name($self->param('name'));
  $self->app->log->debug(sprintf "Set %s $name", $self->dz);
  $self->render(text => "Done.");
};

get '/:uuid/download/:ext' => [uuid => qr/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/, ext => [qw/zip/]] => sub {
  my $self = shift;
  if ( $self->param('ext') eq 'zip' ) {
    #my $zip = zip $self->dz->path;
    #return $self->render_file($zip);
  }
  $self->render("Unknown file type");
};

post '/:uuid/upload' => [uuid => qr/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/] => sub {
  my $self = shift;

  # Check file size
  return $self->render(text => 'File is too big.', status => 200)
    if $self->req->is_limit_exceeded;

  # Process uploaded file
  return $self->redirect_to('index')
    unless my $file = $self->param('file');
  my $size = $file->size;
  my $filename = $file->filename;

  # Check file name
  return $self->render(text => 'File name cannot start with .dz-', status => 200)
    if $file->filename =~ /^\.dz-/;

  my $path = $self->dz->path;
  mkpath $path;
  $file->move_to($self->dz->file($filename));
  $self->app->log->debug("$filename ($size)");
  $self->render(text => "Done.");
};

app->start;
