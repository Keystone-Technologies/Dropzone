use Mojolicious::Lite;

use FindBin;
BEGIN { unshift @INC, "$FindBin::Bin/lib" }

use File::Path;

use DZ;

my $index_re = qr/[0-9]+/;
my $uuid_re = qr/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/;

plugin 'RemoteAddr';

helper dz => sub { DZ->new({app => shift}) };

hook before_routes => sub {
  my $c = shift;
  my $host = $c->req->url->to_abs->host;
  my $host_root = $c->app->home."/branded/$host";
  if ( -d $host_root ) {
    unshift @{$c->app->static->paths}, "$host_root/public" unless grep { $_ eq "$host_root/public" } @{$c->app->static->paths};
    unshift @{$c->app->renderer->paths}, "$host_root/templates" unless grep { $_ eq "$host_root/templates" } @{$c->app->renderer->paths};
  }
  $c->session->{uuid} = [$c->session->{uuid}] if ! ref $c->session->{uuid};
  #$c->session->{uuid} = [grep { $_ } @{$c->session->{uuid}}];
  $c->stash(host => $host);
};

get '/' => sub {
  my $self = shift;
  $self->redirect_to('session', session => $self->dz->first // $self->dz->new_uuid);
};

get '/:session' => [session => qr/$uuid_re|$index_re/] => sub {
  my $self = shift;
  $self->dz->uuid or return $self->render_not_found;
  $self->stash(index => $self->dz->index, uuid => $self->dz->uuid);
  $self->stash(files => [], name => '');
  my $path = $self->dz->path or die "Path error";
  $self->app->log->debug(sprintf "Viewing %s : %s (%s)", $self->stash('host'), $self->dz->uuid, $self->dz->index);
  if ( -d $path ) {
    opendir(my $dir, $path);
    $self->stash(files => [grep { !/^\.dz-/ && -f $self->dz->file($_) } readdir $dir], name => $self->dz->name);
  }
  return $self->render('filelist') if $self->req->is_xhr;
  return $self->redirect_to('session', session => $self->dz->index) if $self->param('session') =~ $uuid_re;
};

get '/new' => sub {
  my $self = shift;
  $self->redirect_to('session', session => $self->dz->new_uuid);
};

get '/sessions' => sub {
  my $self = shift;
  $self->render(json => [$#{$self->session->{uuid}}+1 => $self->session->{uuid}]);
};

under '/:uuid' => [uuid => $uuid_re];

get '/forget' => sub {
  my $self = shift;
  $self->session->{uuid}->[$self->dz->map($self->param('uuid'))] = undef;
  # Pop off all undef elements
  $self->app->log->debug("Forgotten.");
  $self->render(text => "Done.");
};

get '/delete' => sub {
  my $self = shift;
  my $path = $self->dz->path;
  # rm -rf $path if -d $path;
  $self->app->log->debug("Delete $path");
  $self->render(text => "Done.");
};

post '/delete' => sub {
  my $self = shift;
  my $path = $self->dz->path;
  foreach ( @{$self->req->json} ) {
    my $file = $self->dz->file($_);
    # Need to clean input of ../
    # unlink $file if -e $file;
    $self->app->log->debug("Delete $file");
  }
  $self->render(text => "Done.");
};

post '/name' => sub {
  my $self = shift;
  my $name = $self->dz->name($self->param('name'));
  $self->app->log->debug(sprintf "Set %s $name", $self->dz);
  $self->render(text => "Done.");
};

get '/download/:ext' => [ext => [qw/zip/]] => sub {
  my $self = shift;
  if ( $self->param('ext') eq 'zip' ) {
    #my $zip = zip $self->dz->path;
    #return $self->render_file($zip);
  }
  $self->render("Unknown file type");
};

post '/upload' => sub {
  my $self = shift;

  # Check file size
  return $self->render(text => 'File is too big.', status => 200)
    if $self->req->is_limit_exceeded;

  # Process uploaded file
  return $self->redirect_to('index')
    unless my $file = $self->param('file');
  my $size = $file->size;
  my $filename = $file->filename;

  # Check file name
  return $self->render(text => 'File name cannot start with .dz-', status => 200)
    if $file->filename =~ /^\.dz-/;

  my $path = $self->dz->path;
  mkpath $path;
  $file->move_to($self->dz->file($filename));
  $self->app->log->debug("$filename ($size)");
  $self->render(text => "Done.");
};

app->start;
