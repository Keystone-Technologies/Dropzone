use Mojolicious::Lite;

use Mojo::Util qw/slurp spurt/;

use File::Spec::Functions qw(catdir catfile splitdir);
use File::Path;

use UUID::Tiny ':std';

my $domain;

hook before_routes => sub {
  my $c = shift;
  $domain = $c->req->url->to_abs->host;
  my $domain_root = $c->app->home."/branded/$domain";
  if ( -d $domain_root ) {
    my $renderer = Mojolicious::Renderer->new;
    unshift @{$c->app->static->paths}, "$domain_root/public" unless grep { $_ eq "$domain_root/public" } @{$c->app->static->paths};
    unshift @{$c->app->renderer->paths}, "$domain_root/templates" unless grep { $_ eq "$domain_root/templates" } @{$c->app->renderer->paths};
  }
};

get '/' => sub {
  my $self = shift;
  $self->redirect_to('session', uuid => $self->session->{uuid} || uuid_to_string(create_uuid(UUID_V4)));
} => 'index';

get '/new' => sub {
  my $self = shift;
  delete $self->session->{uuid};
  $self->redirect_to('session', uuid => uuid_to_string(create_uuid(UUID_V4)));
};

get '/:uuid' => [uuid => qr/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/] => sub {
  my $self = shift;
  $self->session->{uuid} ||= $self->param('uuid');
  my $home = $self->app->home->to_string;
  my $path = catdir "$home/public/uploads", $self->param('uuid');
  $self->stash(domain => $domain);
  $self->app->log->debug("Viewing $domain : $path");
  if ( -d $path ) {
    opendir(my $dir, $path);
    $self->stash(files => [grep { !/^\.dz-/ && -f "$path/$_" } readdir $dir], name => -e "$path/.dz-name" ? slurp "$path/.dz-name" : '');
  } else {
    $self->stash(files => [], name => '');
  }
  return $self->render('filelist') if $self->req->is_xhr;
} => 'session';

get '/:uuid/delete' => [uuid => qr/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/] => sub {
  my $self = shift;
  my $uuid = $self->param('uuid');
  my $home = $self->app->home->to_string;
  my $path = catdir "$home/public/uploads", $uuid;
  # rm -rf $path if -d $path;
  $self->app->log->debug("Delete $path");
  $self->render(text => "You have removed the entire $uuid session repo.");
};

post '/:uuid/delete' => [uuid => qr/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/] => sub {
  my $self = shift;
  my $uuid = $self->param('uuid');
  my $home = $self->app->home->to_string;
  my $path = catdir "$home/public/uploads", $uuid;
  foreach ( @{$self->req->json} ) {
    # Need to clean input of ../
    # unlink "$path/$_" if -e $path;
    $self->app->log->debug("Delete $path/$_");
  }
  $self->render(text => "You have removed files from $uuid session repo.");
};

post '/:uuid/name' => [uuid => qr/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/] => sub {
  my $self = shift;
  my $uuid = $self->param('uuid');
  my $home = $self->app->home->to_string;
  my $path = catdir "$home/public/uploads", $uuid;
  spurt $self->param('name'), "$path/.dz-name" if -d $path;
  $self->app->log->debug("Set name for $uuid");
  $self->render(text => "You have named the $uuid session repo.");
};

post '/:uuid/upload' => [uuid => qr/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/] => sub {
  my $self = shift;

  # Check file size
  return $self->render(text => 'File is too big.', status => 200)
    if $self->req->is_limit_exceeded;

  # Process uploaded file
  return $self->redirect_to('index')
    unless my $file = $self->param('file');
  my $size = $file->size;
  my $name = $file->filename;

  # Check file name
  return $self->render(text => 'File name cannot start with .dz-', status => 200)
    if $file->filename =~ /^\.dz-/;

  my $uuid = $self->param('uuid');
  my $home = $self->app->home->to_string;
  mkpath "$home/public/uploads/$uuid";
  $file->move_to("$home/public/uploads/$uuid/$name");
  $self->app->log->debug("$home/public/uploads/$uuid/$name ($size)");
  $self->render(text => "Thanks for uploading $size byte file $name.");
};

app->start;
