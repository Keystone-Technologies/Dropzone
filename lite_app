use Mojolicious::Lite;

use File::Spec::Functions qw(catdir catfile splitdir);
use File::Path;

use UUID::Tiny ':std';

hook before_routes => sub {
  my $c = shift;
  $c->app->log->debug($c->req->url->to_abs->host);
};

get '/' => sub {
  my $self = shift;
  $self->session->{uuid} = uuid_to_string(create_uuid(UUID_V4));
} => 'index';

post '/file-upload' => sub {
  my $self = shift;

  # Check file size
  return $self->render(text => 'File is too big.', status => 200)
    if $self->req->is_limit_exceeded;

  # Process uploaded file
  return $self->redirect_to('index')
    unless my $file = $self->param('file');
  my $size = $file->size;
  my $name = $file->filename;
  my $uuid = $self->session->{uuid};
  my $home = $self->app->home->to_string;
  mkpath "$home/public/uploads/$uuid";
  $file->move_to("$home/public/uploads/$uuid/$name");
  $self->app->log->debug("$home/public/uploads/$uuid/$name ($size)");
  $self->render(text => "Thanks for uploading $size byte file $name.");
};

get '/:uuid' => [uuid => qr/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/] => sub {
  my $self = shift;
  my $home = $self->app->home->to_string;
  return $self->render_not_found unless -d (my $path = catdir "$home/public/uploads", $self->param('uuid'));
  $self->app->log->debug("Viewing $path");
  opendir(my $dir, $path);
  $self->stash(files => [grep { -f "$path/$_" } readdir $dir]);
} => 'session-index';

app->start;
