use Mojolicious::Lite;

use FindBin;
BEGIN { unshift @INC, "$FindBin::Bin/lib" }

use Mojo::Util qw/slurp spurt/;

use File::Spec::Functions qw(catdir catfile splitdir);
use File::Path;

use UUID::Tiny ':std';
use List::Util qw(first);

my $host;

hook before_routes => sub {
  my $c = shift;
  $host = $c->req->url->to_abs->host;
  my $host_root = $c->app->home."/branded/$host";
  if ( -d $host_root ) {
    unshift @{$c->app->static->paths}, "$host_root/public" unless grep { $_ eq "$host_root/public" } @{$c->app->static->paths};
    unshift @{$c->app->renderer->paths}, "$host_root/templates" unless grep { $_ eq "$host_root/templates" } @{$c->app->renderer->paths};
  }
};

helper uuid => sub { uuid_to_string(create_uuid(UUID_V4)) };

helper session_manager => sub {
  my $self = shift;
  local $_ = shift;
  $self->session->{uuid} = [$self->session->{uuid}] if ! ref $self->session->{uuid};
  if ( /^[0-9]+$/ ) {
    if ( $self->session->{uuid}->[$_] ) {
      return $self->session->{uuid}->[$_];
    } elsif ( $_ == 0 ) {
      push @{$self->session->{uuid}}, $self->uuid;
      return $self->session->{uuid}->[-1];
    } else {
      die "Not found"
    }
  } elsif ( /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/ ) {
    my $uuid = $_;
    if ( grep { $uuid eq $_ } @{$self->session->{uuid}} ) {
      return first { $self->session->{uuid}->[$_] eq $uuid } 0 .. $#{$self->session->{uuid}};
    } else {
      push @{$self->session->{uuid}}, $uuid;
      return $#{$self->session->{uuid}};
    }
  }
};

get '/:index' => [index => qr/[0-9]+/] => {index => 0} => sub {
  my $self = shift;
  $self->app->log->debug($self->param('index').' => '.$self->session_manager($self->param('index')));
  my $uuid = $self->session_manager($self->param('index'));
  my $home = $self->app->home->to_string;
  my $path = catdir $home, 'public', 'uploads', $uuid;
  $self->stash(host => $host, uuid => $uuid);
  $self->app->log->debug("Viewing $host : $path");
  if ( -d $path ) {
    opendir(my $dir, $path);
    $self->stash(files => [grep { !/^\.dz-/ && -f "$path/$_" } readdir $dir], name => -e "$path/.dz-name" ? slurp "$path/.dz-name" : '');
  } else {
    $self->stash(files => [], name => '');
  }
  return $self->render('filelist') if $self->req->is_xhr;
} => 'session';

get '/new' => sub {
  my $self = shift;
  $self->redirect_to('uuid', uuid => $self->uuid);
};

get '/:uuid' => [uuid => qr/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/] => sub {
  my $self = shift;
  $self->app->log->debug($self->param('uuid').' => '.$self->session_manager($self->param('uuid')));
  $self->redirect_to('session', index => $self->session_manager($self->param('uuid')));
};

get '/:uuid/delete' => [uuid => qr/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/] => sub {
  my $self = shift;
  my $uuid = $self->param('uuid');
  my $home = $self->app->home->to_string;
  my $path = catdir "$home/public/uploads", $uuid;
  # rm -rf $path if -d $path;
  $self->app->log->debug("Delete $path");
  $self->render(text => "You have removed the entire $uuid session repo.");
};

post '/:uuid/delete' => [uuid => qr/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/] => sub {
  my $self = shift;
  my $uuid = $self->param('uuid');
  my $home = $self->app->home->to_string;
  my $path = catdir "$home/public/uploads", $uuid;
  foreach ( @{$self->req->json} ) {
    # Need to clean input of ../
    # unlink "$path/$_" if -e $path;
    $self->app->log->debug("Delete $path/$_");
  }
  $self->render(text => "You have removed files from $uuid session repo.");
};

post '/:uuid/name' => [uuid => qr/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/] => sub {
  my $self = shift;
  my $uuid = $self->param('uuid');
  my $home = $self->app->home->to_string;
  my $path = catdir "$home/public/uploads", $uuid;
  spurt $self->param('name'), "$path/.dz-name" if -d $path;
  $self->app->log->debug("Set name for $uuid");
  $self->render(text => "You have named the $uuid session repo.");
};

get '/:uuid/download/:ext' => [uuid => qr/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/, ext => [qw/zip/]] => sub {
  my $self = shift;
  my $uuid = $self->param('uuid');
  my $home = $self->app->home->to_string;
  my $path = catdir "$home/public/uploads", $uuid;
  if ( $self->param('ext') eq 'zip' ) {
    #my $zip = zip $path;
    #return $self->render_file($zip);
  }
  $self->render("Unknown file type");
};

post '/:uuid/upload' => [uuid => qr/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/] => sub {
  my $self = shift;

  # Check file size
  return $self->render(text => 'File is too big.', status => 200)
    if $self->req->is_limit_exceeded;

  # Process uploaded file
  return $self->redirect_to('index')
    unless my $file = $self->param('file');
  my $size = $file->size;
  my $name = $file->filename;

  # Check file name
  return $self->render(text => 'File name cannot start with .dz-', status => 200)
    if $file->filename =~ /^\.dz-/;

  my $uuid = $self->param('uuid');
  my $home = $self->app->home->to_string;
  mkpath "$home/public/uploads/$uuid";
  $file->move_to("$home/public/uploads/$uuid/$name");
  $self->app->log->debug("$home/public/uploads/$uuid/$name ($size)");
  $self->render(text => "Thanks for uploading $size byte file $name.");
};

app->start;
